<?php

/**
 * @file
 * Contains general.module.
 * Hooks & general code for the Acas site
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Site\Settings;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use \CloudConvert\Api;
use Sunra\PhpSimple\HtmlDomParser;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Implements hook_help().
 */
function general_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the general module.
    case 'help.page.general':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Acas general module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_insert().
 */
function general_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node' && ($entity->bundle() == 'landing_page' || $entity->bundle() == 'details_page')) {
    general_menu_first_level();
  }
}

/**
 * Implements hook_entity_delete().
 */
function general_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node' && ($entity->bundle() == 'landing_page' || $entity->bundle() == 'details_page')) {
    general_menu_first_level();
  }
}

/**
 * Implements hook_entity_update().
 */
function general_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node' && ($entity->bundle() == 'landing_page' || $entity->bundle() == 'details_page')) {
    general_menu_first_level();
  }
  if ($entity->getEntityTypeId() == 'taxonomy_term' && $entity->bundle() == 'acas') {
    $query = \Drupal::database()->select('taxonomy_index', 'ti');
    $query->join('taxonomy_term_field_data', 'fd', 'fd.tid = ti.tid');
    $query->fields('ti', array('nid'));
    $query->condition('ti.tid', $entity->id(), '=');
    $result = $query->execute();
    if ($nid = $result->fetchCol()) {
      $node = \Drupal\node\Entity\Node::load($nid[0]);
      if ($node->getTitle() != $entity->getName()) {
        $node->setTitle($entity->getName());
        $node->save();
        general_menu_first_level();
      }
    }
  }
}

/**
 * Implements hook_entity_view().
 */
function general_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'entity_view') {
    $group = $implementations['general'];
    unset($implementations['general']);
    $implementations['general'] = $group;
  }
}

/**
 * Implements hook_entity_view().
 */
function general_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'full' && $entity instanceof \Drupal\node\NodeInterface && ($entity->getType() == 'details_page' || $entity->getType() == 'support_page')) {
    if ($entity->getType() == 'details_page') {
      $parents = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadParents($entity->get('field_taxonomy')->target_id);
      $markup = '';
      $section = '<ul class="section"><li>In:</li>';
      foreach($parents as $parent) {
        $markup .= '<span class="parent-name">' . $parent->getName() . '</span><span class="parent-description">' . $parent->getDescription() . '</span>';
        $section .= '<li>' . $parent->getName() . '</li>';
      }
      $section .= '</ul>';
      $build['taxonomy'] = [
        '#markup' => '<div class="taxonomy-parent">' . $markup . '</div>',
        '#weight' => 990,
      ];
    }
    if ($entity->get('field_useful')->value) {
      $build['feedback'] = [
        '#markup' => '<div id="feedback_wrapper"><div id="useful_wrapper"><span class="text">Is this page useful?</span>&nbsp;<a href="/contact" nid="' . $entity->id() . '">Yes</a>&nbsp;<a href="/contact" nid="' . $entity->id() . '">No</a></div>',
        '#weight' => 995,
      ];
    }
    if ($entity->get('field_anything_wrong')->value) {
      $form = \Drupal\webform\Entity\Webform::load('anything_wrong');
      $result = \Drupal::service('path.alias_manager')->getAliasByPath(\Drupal::service('path.current')->getPath());
      $values = ['data' => ['page_url' => 'https://' . $_SERVER['HTTP_HOST'] . $result]];
      $form->getSubmissionForm($values);
      $build['anything_wrong_link'] = [
        '#markup' => '<div id="anything-wrong-wrapper"><a id="anything-wrong-link" href="#anything-wrong-link">Anything wrong with this page?</a><a id="anything-wrong-close" href="#anything-wrong-link">Close</a></div></div>',
        '#weight' => 998,
      ];
      $build['anything_wrong'] = \Drupal::entityManager()
        ->getViewBuilder('webform')
        ->view($form);
      $build['anything_wrong']['#weight'] = 999;
      $build['anything_wrong']['#attached']['library'][] = 'general/anything_wrong';
    }
    if ($entity->get('field_print_download')->value) {
      $build['print_download_email'] = [
        '#markup' => '<div class="print-download-email">
          <a class="btn-cta btn-cta--print" href="/node/' . $entity->id() . '/printable/print">Print</a>
          <a class="btn-cta btn-cta--download" href="/print/pdf/node/' . $entity->id() . '">Download</a>
          <a class="btn-cta btn-cta--email" href="mailto:?subject=' . $entity->getTitle() . '&body=Check out this site ' . $entity->toUrl('canonical', ['absolute' => TRUE])->toString() . '">Email</a>
        </div>',
        '#weight' => 992,
      ];
    }
  }elseif ($view_mode == 'search_index' && $entity instanceof \Drupal\node\NodeInterface && $entity->getType() == 'details_page') {
    $parents = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadAllParents($entity->get('field_taxonomy')->target_id);
    $parents = array_reverse($parents, TRUE);
    $section = '<ul class="section"><li>In:</li>';
    $url = '';
    foreach($parents as $parent) {
      if ($entity->get('field_taxonomy')->target_id != $parent->id()) {
        $url .= '/' . general_taxonomy_path($parent->getName());
        $section .= '<li>&nbsp;&gt;&nbsp;<a href="' . $url . '">' . $parent->getName() . '</a></li>';
      }
    }
    $section .= '</ul>';
    $build['section'] = [
      '#markup' => $section,
      '#weight' => 990,
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the search_block_form form.
 */
function general_form_header_search_alter(&$form, FormStateInterface $form_state) {
  // NB so that these are not added to the get query params
  $form['form_build_id']['#access'] = FALSE;
  $form['form_token']['#access'] = FALSE;
  $form['form_id']['#access'] = FALSE;
}

/**
 * Implements hook_form_alter
 */

function general_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    $form['keys']['#attributes']['placeholder'] = t("Search ACAS");
    $form['keys']['#attributes']['autocomplete'] = 'off';
    $form['keys']['#title'] = t("Search ACAS");
    $form['keys']['#title_display'] = 'invisible';
    //$form['search_api_fulltext']['#required'] = TRUE;
  }
  if ($form_id == 'taxonomy_overview_terms') {
    $form['#submit'][] = 'general_taxonomy_overview_terms_submit';
  }
  if ($form_id == 'sync_form') {
    $form['actions']['submit']['#value'] = 'Start syncronisation to Prod';
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function general_page_attachments_alter(&$build) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  if ($theme == 'seven') {
    $build['#attached']['library'][] = 'general/extra.admin';
  }
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\NodeInterface && ($node->getType() == 'details_page' || $node->getType() == 'support_page')) {
    $build['#attached']['library'][] = 'general/details_page';
  }
}

/**
 * Implements hook_entity_presave().
 * 
 * Convert the file to html via the CloudConvert service
 * https://cloudconvert.com
 */
function general_entity_presave(Drupal\Core\Entity\EntityInterface $entity) { 
  if ($entity->getEntityTypeId() == 'media' && $entity->bundle() == 'file') {
    $apiKey = \Drupal::config('cloudconvert.settings')->get('api_key');
    $scheme = Drupal::service('flysystem_factory')->getSchemes();
    $settings = Settings::get('flysystem', []);
    $config = $settings[$scheme[0]]['config'];
    $bundle = $entity->get('field_media_file')->referencedEntities();
    $file = $bundle[0];
    $filepath = str_replace($scheme[0] . '://', '', $file->getFileUri());
    $type = strtolower(pathinfo($filepath, PATHINFO_EXTENSION));
    $path = pathinfo($filepath, PATHINFO_DIRNAME);
    $url = 'https://s3-' . $config['region'] . '.amazonaws.com/' . $config['bucket'] . '/' . str_replace('.' . $type, '.html', $filepath);
    $entity->field_html_url->setValue($url);
    
    $api = new Api($apiKey);
    $cmd = [
      "inputformat" => $type,
      "outputformat" => "html",
      "input" => [
        "s3" => [
          "accesskeyid" => $config['key'],
          "secretaccesskey" => $config['secret'],
          "bucket" => $config['bucket'],
          "region" => $config['region'],
        ],
      ],
      "file" => $filepath,
      "output" => [
        "s3" => [
          "accesskeyid" => $config['key'],
          "secretaccesskey" => $config['secret'],
          "bucket" => $config['bucket'],
          "region" => $config['region'],
          "path" => $path . '/',
          "acl" => "public-read",
        ],
      ],
    ];
    try {
      $result = $api->convert($cmd)->wait();
    }catch (\Exception $e) {
      drupal_set_message($e->getMessage(), 'error');
      return;
    }
    // As the converted html file is displayed in a iframe, it might not be loaded when search
    // engines index the page. Get the html file and embed the text of the body in a hidden field
    $url = file_create_url(str_replace('.' . $type, '.html', $file->getFileUri()));
    if ($html = file_get_contents($url)) {
      $a = explode('<body>', str_replace('</body>', '', $html));
      $text = preg_replace("/[^A-Za-z0-9 ]/", ' ', strip_tags($a[1]));
      $entity->field_html_body->setValue($text);
    }
  }
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function general_pathauto_alias_alter(&$alias, array &$context) {
  if (($context['bundle'] === 'details_page' || $context['bundle'] === 'landing_page') && ($context['op'] == 'insert' || $context['op'] == 'update')) {
    $entity = $context['data']['node'];
    $parents = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadAllParents($entity->get('field_taxonomy')->target_id);
    $parents = array_reverse($parents, TRUE);
    $alias = '';
    foreach($parents as $parent) {
      $alias .= '/' . general_taxonomy_path($parent->getName());
    }
  }
}

function general_taxonomy_path($name) {
  $name = str_replace('/', ' ', strtolower($name));
  $name = str_replace(':', ' ', $name);
  $name = preg_replace("/[^A-Za-z0-9 ]/", '', $name);
  $name = str_replace(' ', '-', $name);
  return $name;
}

function general_taxonomy_overview_terms_submit($form, &$form_state) {
  $args = $form_state->getBuildInfo()['args'];
  if ($args[0]->id() == 'acas') {
    general_menu_first_level();
  }
}

/**
 * Implements hook_taxonomy_term_update().
 */
function general_taxonomy_term_update($term) {
  if ($term->getVocabularyId() == 'acas') {
    general_menu_first_level();
  }
}

function general_menu_first_level() {
  general_menu_full_first_level();
  return;

  $menu_name = 'main';
  $menu_handler = \Drupal::service('plugin.manager.menu.link');
  $menu_handler->deleteLinksInMenu($menu_name);
  // Get top level
  $children = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('acas', 0, 1);
  $termIds = [];
  foreach ($children as $value) {
    $termIds[$value->tid] = $value->tid;
  }
  $query = \Drupal::database()->select('taxonomy_index', 'ti');
  $query->join('taxonomy_term_field_data', 'fd', 'fd.tid = ti.tid');
  $query->fields('ti', array('nid'));
  $query->condition('ti.tid', $termIds, 'IN');
  $query->orderBy('fd.weight', 'ASC');
  $result = $query->execute();
  $weight = 0;
  if($nodeIds = $result->fetchCol()){
    $nodes = \Drupal\node\Entity\Node::loadMultiple($nodeIds);
    foreach($nodes as $node) {
      $first_level = MenuLinkContent::create([
        'title' => $node->getTitle(),
        'link' => ['uri' => 'internal:' . $node->toUrl()->toString()],
        'menu_name' => $menu_name,
        'expanded' => TRUE,
        'weight' => $weight,
      ]);
      $first_level->save();
      $weight++;
      general_menu_second_level($first_level, $node, $weight);
    }
  }
}

function general_menu_second_level($first_level, $node, &$weight) {
  if ($children = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadChildren($node->get('field_taxonomy')->target_id)) {
    $termIds = [];
    foreach ($children as $key => $value) {
      $termIds[$key] = $key;
    }
    $query = \Drupal::database()->select('taxonomy_index', 'ti');
    $query->join('taxonomy_term_field_data', 'fd', 'fd.tid = ti.tid');
    $query->fields('ti', array('nid'));
    $query->condition('ti.tid', $termIds, 'IN');
    $query->orderBy('fd.weight', 'ASC');
    $result = $query->execute();
    $output = '';
    if($nodeIds = $result->fetchCol()){
      $nodes = \Drupal\node\Entity\Node::loadMultiple($nodeIds);
      foreach($nodes as $node) {
        $second_level = MenuLinkContent::create([
          'title' => $node->getTitle(),
          'link' => ['uri' => 'internal:' . $node->toUrl()->toString()],
          'parent' => $first_level->getPluginId(),
          'expanded' => TRUE,
          'weight' => $weight,
        ]);
        $second_level->save();
        $weight++;
        general_menu_second_level($second_level, $node, $weight);
      }
    }
  }
}

// Full menu
function general_menu_full_first_level() {
  $menu_name = 'main';
  $menu_handler = \Drupal::service('plugin.manager.menu.link');
  $menu_handler->deleteLinksInMenu($menu_name);
  // Get top level
  $children = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('acas', 0, 1);
  $termIds = [];
  foreach ($children as $value) {
    $termIds[$value->tid] = $value->tid;
  }
  $query = \Drupal::database()->select('taxonomy_index', 'ti');
  $query->join('taxonomy_term_field_data', 'fd', 'fd.tid = ti.tid');
  $query->fields('ti', array('nid'));
  $query->condition('ti.tid', $termIds, 'IN');
  $query->orderBy('fd.weight', 'ASC');
  $result = $query->execute();
  $weight = 0;
  if($nodeIds = $result->fetchCol()){
    $nodes = \Drupal\node\Entity\Node::loadMultiple($nodeIds);
    foreach($nodes as $node) {
      $first_level = MenuLinkContent::create([
        'title' => $node->getTitle(),
        'link' => ['uri' => 'internal:' . $node->toUrl()->toString()],
        'menu_name' => $menu_name,
        'expanded' => TRUE,
        'weight' => $weight,
      ]);
      $first_level->save();
      $weight++;
      general_menu_full_second_level($first_level, $node->get('field_taxonomy')->target_id, $weight);
    }
  }
}

function general_menu_full_second_level($first_level, $tid, &$weight) {
  if ($children = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadChildren($tid)) {
    $query = \Drupal::database()->select('taxonomy_index', 'ti');
    $query->join('taxonomy_term_field_data', 'fd', 'fd.tid = ti.tid');
    $query->fields('ti', array('nid'));
    foreach ($children as $key => $value) {
      // See if have node
      $query->condition('ti.tid', $key, '=');
      $result = $query->execute();
      if ($nid = $result->fetchCol()) {
        $node = \Drupal\node\Entity\Node::load($nid[0]);
        $second_level = MenuLinkContent::create([
          'title' => $node->getTitle(),
          'link' => ['uri' => 'internal:' . $node->toUrl()->toString()],
          'parent' => $first_level->getPluginId(),
          'expanded' => TRUE,
          'weight' => $weight,
        ]);
      }else{
        // No node. See if have link to external site
        $second_level = MenuLinkContent::create([
          'title' => $value->getName(),
          'link' => ['uri' => 'internal:' . $value->toUrl()->toString()],
          'parent' => $first_level->getPluginId(),
          'expanded' => TRUE,
          'weight' => $weight,
        ]);
      }
      $second_level->save();
      $weight++;
      general_menu_full_second_level($second_level, $key, $weight);
    }
  }
}

function general_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if (strpos($view->current_display, 'rest_export') !== FALSE) {
    $filters = $view->display_handler->getOption('filters');
    if (@$_GET['start']) {
      $query->addWhere(1, '.start_date', strtotime($_GET['start']), '=');
    }
    if (@$_GET['end']) {
      $query->addWhere(1, '.end_date', strtotime($_GET['end']), '=');
    }
  }
}

function general_ckeditor_css_alter(&$css, $editor) {
  $css[] = drupal_get_path('module', 'general') . '/css/ckeditor.css';
}

function general_sync_prod() {
  $config = \Drupal::config('acas.settings');
  $connection = \Drupal\Core\Database\Database::getConnection()->getConnectionOptions();
  $output = '';
  $file = 'DB_' . time() . '.sql';
  $path = '/tmp/' . $file;
  $exclude = [
    'history',
    'sessions',
    'votingapi_result',
    'votingapi_vote',
    'webform',
    'webform_scheduled_email',
    'webform_submission',
    'webform_submission_data',
    'webform_submission_log'
  ];
  $tables = '';
  $databse = $connection['database'];
  foreach($exclude as $t) {
    $tables .= " --ignore-table=$databse.$t";
  }
  $cmd = 'mysqldump -u ' . $connection['username'] . ' -p' . $connection['password'] . ' -h ' . $connection['host'] . ' ' . $connection['database'] . $tables . ' > ' . $path;
  exec($cmd);
  // Zip, Base64, curl to prod
  $zip_file = str_replace('.sql', '.zip', $path);
  $zip = new ZipArchive();
  $zip->open($zip_file, constant("ZipArchive::CREATE"));
  $zip->addFile($path, $file);
  $zip->close();
  $encoded = base64_encode(file_get_contents($zip_file));
  unlink($path);
  unlink($zip_file);
  $POST_DATA = array(
    'data' => $encoded,
    'UUID' => \Drupal::config('system.site')->get('uuid'),
    'file' => $file,
  );
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, 'https://beta-acas.org.uk/sync-update');
  curl_setopt($curl, CURLOPT_TIMEOUT, 30);
  curl_setopt($curl, CURLOPT_POST, 1);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $POST_DATA);
  $response = curl_exec($curl);
  curl_close ($curl);
  drupal_set_message('Finished syncing content to Production');
}

function _is_site($site = 'beta') {
  $a = explode('.', $_SERVER['HTTP_HOST']);
  if (strpos($a[0], $site) !== FALSE) {
    return TRUE;
  }
  return FALSE;
}

/**
 * 
 * Health check
 * Called by Amazon Route53 health checks
 */
function general_health() {
  return '<h1>All checks passed</h1>';
}