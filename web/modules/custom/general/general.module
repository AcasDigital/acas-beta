<?php

/**
 * @file
 * Contains general.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Site\Settings;
use \CloudConvert\Api;
use Sunra\PhpSimple\HtmlDomParser;

/**
 * Implements hook_help().
 */
function general_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the general module.
    case 'help.page.general':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Acas general module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_view().
 */
function general_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'full' && $entity instanceof \Drupal\node\NodeInterface && $entity->getType() == 'details_page') {
    $parents = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadParents($entity->get('field_taxonomy')->target_id);
    $markup = '';
    $section = '<ul class="section"><li>In:</li>';
    foreach($parents as $parent) {
      $markup .= '<span class="parent-name">' . $parent->getName() . '</span><span class="parent-description">' . $parent->getDescription() . '</span>';
      $section .= '<li>' . $parent->getName() . '</li>';
    }
    $section .= '</ul>';
    $build['taxonomy'] = [
      '#markup' => '<div class="taxonomy-parent">' . $markup . '</div>',
      '#weight' => 990,
    ];
    $form = \Drupal\webform\Entity\Webform::load('anything_wrong');
    $result = \Drupal::service('path.alias_manager')->getAliasByPath(\Drupal::service('path.current')->getPath());
    $values = ['data' => ['page_url' => 'https://' . $_SERVER['HTTP_HOST'] . $result]];
    $form->getSubmissionForm($values);
    $build['anything_wrong_link'] = [
      '#markup' => '<div id="anything-wrong-wrapper"><a id="anything-wrong-link" href="#anything-wrong-link">Anything wrong with this page?</a><a id="anything-wrong-close" href="#anything-wrong-link">Close</a></div>',
      '#weight' => 991,
    ];
    $build['anything_wrong'] = \Drupal::entityManager()
      ->getViewBuilder('webform')
      ->view($form);
    $build['anything_wrong']['#weight'] = 992;
    $build['anything_wrong']['#attached']['library'][] = 'general/anything_wrong';
  }elseif ($view_mode == 'default' && $entity instanceof \Drupal\node\NodeInterface && $entity->getType() == 'details_page') {
    $parents = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadParents($entity->get('field_taxonomy')->target_id);
    $section = '<ul class="section"><li>In:</li>';
    $url = '';
    foreach($parents as $parent) {
      $url .= '/' . str_replace(' ', '-', strtolower($parent->getName()));
      $section .= '<li>&nbsp;&gt;&nbsp;<a href="' . $url . '">' . $parent->getName() . '</a></li>';
    }
    $section .= '</ul>';
    $build['section'] = [
      '#markup' => $section,
      '#weight' => 990,
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the search_block_form form.
 */
function general_form_header_search_alter(&$form, FormStateInterface $form_state) {
  // NB so that these are not added to the get query params
  $form['form_build_id']['#access'] = FALSE;
  $form['form_token']['#access'] = FALSE;
  $form['form_id']['#access'] = FALSE;
}

/**
 * Implements hook_form_alter
 */

function general_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    $form['search_api_fulltext']['#attributes']['placeholder'] = t("Search ACAS");
    $form['search_api_fulltext']['#attributes']['autocomplete'] = 'off';
    $form['search_api_fulltext']['#title'] = t("Search ACAS");
    $form['search_api_fulltext']['#title_display'] = 'invisible';
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function general_page_attachments_alter(&$build) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  if ($theme == 'seven') {
    $build['#attached']['library'][] = 'general/extra.admin';
  }
}

/**
 * Implements hook_page_attachments_alter().
 * 
 * Convert the file to html via the CloudConvert service
 * https://cloudconvert.com
 */
function general_entity_presave(Drupal\Core\Entity\EntityInterface $entity) { 
  if ($entity->getEntityTypeId() == 'media' && $entity->bundle() == 'file') {
    $apiKey = \Drupal::config('cloudconvert.settings')->get('api_key');
    $scheme = Drupal::service('flysystem_factory')->getSchemes();
    $settings = Settings::get('flysystem', []);
    $config = $settings[$scheme[0]]['config'];
    $bundle = $entity->get('field_media_file')->referencedEntities();
    $file = $bundle[0];
    $filepath = str_replace($scheme[0] . '://', '', $file->getFileUri());
    $type = strtolower(pathinfo($filepath, PATHINFO_EXTENSION));
    $path = pathinfo($filepath, PATHINFO_DIRNAME);
    $url = 'https://s3-' . $config['region'] . '.amazonaws.com/' . $config['bucket'] . '/' . str_replace('.' . $type, '.html', $filepath);
    $entity->field_html_url->setValue($url);
    
    $api = new Api($apiKey);
    $cmd = [
      "inputformat" => $type,
      "outputformat" => "html",
      "input" => [
        "s3" => [
          "accesskeyid" => $config['key'],
          "secretaccesskey" => $config['secret'],
          "bucket" => $config['bucket'],
          "region" => $config['region'],
        ],
      ],
      "file" => $filepath,
      "output" => [
        "s3" => [
          "accesskeyid" => $config['key'],
          "secretaccesskey" => $config['secret'],
          "bucket" => $config['bucket'],
          "region" => $config['region'],
          "path" => $path . '/',
          "acl" => "public-read",
        ],
      ],
    ];
    try {
      $result = $api->convert($cmd)->wait();
    }catch (\Exception $e) {
      drupal_set_message($e->getMessage(), 'error');
      return;
    }
    // As the converted html file is displayed in a iframe, it might not be loaded when search
    // engines index the page. Get the html file and embed the text of the body in a hidden field
    $url = file_create_url(str_replace('.' . $type, '.html', $file->getFileUri()));
    if ($html = file_get_contents($url)) {
      $a = explode('<body>', str_replace('</body>', '', $html));
      $text = preg_replace("/[^A-Za-z0-9 ]/", '', strip_tags($a[1]));
      $entity->field_html_body->setValue($text);
    }
  }
}

/**
 * 
 * Health check
 * Called by Amazon Route53 health checks
 */
function general_health() {
  return '<h1>All checks passed</h1>';
}